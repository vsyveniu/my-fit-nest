generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  password    String
  phone       String   @unique
  chains      Chain[]
  profile     Profile?
  createdAt   DateTime @default(now())
  updatedArAt DateTime @updatedAt
}

model Profile {
  id          Int      @id @default(autoincrement())
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?     @unique
  name        String   @unique
  avatar      String
  createdAt   DateTime @default(now())
  updatedArAt DateTime @updatedAt
}

model Chain {
  id          Int      @id @default(autoincrement())
  name        String   @default("unnamed")
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int?
  isActive    Boolean  @default(false)
  days        Day[]
  createdAt   DateTime @default(now())
  updatedArAt DateTime @updatedAt
}

model Day {
  id          Int       @id @default(autoincrement())
  chain       Chain?    @relation(fields: [chainId], references: [id])
  chainId     Int?
  isToday     Boolean   @default(false)
  type        String    @default("free")
  workouts    Workout[]
  createdAt   DateTime  @default(now())
  updatedArAt DateTime  @updatedAt
}

model Workout {
  id          Int                   @id @default(autoincrement())
  day         Day?                  @relation(fields: [dayId], references: [id], onDelete: Cascade)
  dayId       Int?
  exercises   ExercisesOnWorkouts[]
  createdAt   DateTime              @default(now())
  updatedArAt DateTime              @updatedAt
}

model Exercise {
  id            Int                   @id @default(autoincrement())
  workoutId     Int
  workout       ExercisesOnWorkouts[]
  title         String
  description   String
  type          String
  reps          Int?
  weight        Int?
  distance      Int?
  timeAction    Int?
  timeRest      Int?
  completedReps Int?
  completedTime Int?
  muscleGroup   String?
  image         String?
  video         String?
  isPublic      Boolean               @default(false)
  createdAt     DateTime              @default(now())
  updatedArAt   DateTime              @updatedAt
}

model ExercisesOnWorkouts {
  workout    Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId  Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId Int

  @@id([workoutId, exerciseId])
}

model CommonExercise {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  type        String
  reps        Int?
  weight      Int?
  distance    Int?
  timeAction  Int?
  timeRest    Int?
  muscleGroup String?
  image       String?
  video       String?
  createdAt   DateTime @default(now())
  updatedArAt DateTime @updatedAt
}
